int plus(int,int);
int minus(int,int);

void foo(int a, int b) {
  printf("%d %d\n", a, b);

  { int x;
    int y;

    x = plus(a, b);
    y = minus(a, b);

    a = x;
    b = y;
  }

  printf("%d %d\n", a, b);
}

/*


00000000 <foo>:
   0:	55                   	push   ebp
   1:	89 e5                	mov    ebp,esp
   3:	83 ec 18             	sub    esp,0x18
   6:	83 ec 04             	sub    esp,0x4
   9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   f:	68 00 00 00 00       	push   0x0
  14:	e8 fc ff ff ff       	call   15 <foo+0x15>
  19:	83 c4 10             	add    esp,0x10
  1c:	83 ec 08             	sub    esp,0x8
  1f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
  22:	ff 75 08             	push   DWORD PTR [ebp+0x8]
  25:	e8 fc ff ff ff       	call   26 <foo+0x26>
  2a:	83 c4 10             	add    esp,0x10
  2d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
  30:	83 ec 08             	sub    esp,0x8
  33:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
  36:	ff 75 08             	push   DWORD PTR [ebp+0x8]
  39:	e8 fc ff ff ff       	call   3a <foo+0x3a>
  3e:	83 c4 10             	add    esp,0x10
  41:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
  44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
  47:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
  4a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
  4d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
  50:	83 ec 04             	sub    esp,0x4
  53:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
  56:	ff 75 08             	push   DWORD PTR [ebp+0x8]
  59:	68 00 00 00 00       	push   0x0
  5e:	e8 fc ff ff ff       	call   5f <foo+0x5f>
  63:	83 c4 10             	add    esp,0x10
  66:	c9                   	leave  
  67:	c3                   	ret    




// 64bit from here on
// uses registers instead of stack



Disassembly of section .text:

0000000000000000 <foo>:
   0:	55                   	push   rbp
   1:	48 89 e5             	mov    rbp,rsp
   4:	48 83 ec 20          	sub    rsp,0x20
   8:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   b:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
   e:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
  11:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  14:	89 c6                	mov    esi,eax
  16:	bf 00 00 00 00       	mov    edi,0x0
  1b:	b8 00 00 00 00       	mov    eax,0x0
  20:	e8 00 00 00 00       	call   25 <foo+0x25>
  25:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
  28:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  2b:	89 d6                	mov    esi,edx
  2d:	89 c7                	mov    edi,eax
  2f:	e8 00 00 00 00       	call   34 <foo+0x34>
  34:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
  37:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
  3a:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  3d:	89 d6                	mov    esi,edx
  3f:	89 c7                	mov    edi,eax
  41:	e8 00 00 00 00       	call   46 <foo+0x46>
  46:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
  49:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  4c:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
  4f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  52:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
  55:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
  58:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  5b:	89 c6                	mov    esi,eax
  5d:	bf 00 00 00 00       	mov    edi,0x0
  62:	b8 00 00 00 00       	mov    eax,0x0
  67:	e8 00 00 00 00       	call   6c <foo+0x6c>
  6c:	c9                   	leave  
  6d:	c3                   	ret    
[youmu@arch Projects]$ 



// before, with + and - rather than plus and minus


Disassembly of section .text:

0000000000000000 <foo>:
   0:	55                   	push   rbp
   1:	48 89 e5             	mov    rbp,rsp
   4:	48 83 ec 20          	sub    rsp,0x20
   8:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
   b:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
   e:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
  11:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  14:	89 c6                	mov    esi,eax
  16:	bf 00 00 00 00       	mov    edi,0x0
  1b:	b8 00 00 00 00       	mov    eax,0x0
  20:	e8 00 00 00 00       	call   25 <foo+0x25>
  25:	8b 55 ec             	mov    edx,DWORD PTR [rbp-0x14]
  28:	8b 45 e8             	mov    eax,DWORD PTR [rbp-0x18]
  2b:	01 d0                	add    eax,edx
  2d:	89 45 fc             	mov    DWORD PTR [rbp-0x4],eax
  30:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  33:	2b 45 e8             	sub    eax,DWORD PTR [rbp-0x18]
  36:	89 45 f8             	mov    DWORD PTR [rbp-0x8],eax
  39:	8b 45 fc             	mov    eax,DWORD PTR [rbp-0x4]
  3c:	89 45 ec             	mov    DWORD PTR [rbp-0x14],eax
  3f:	8b 45 f8             	mov    eax,DWORD PTR [rbp-0x8]
  42:	89 45 e8             	mov    DWORD PTR [rbp-0x18],eax
  45:	8b 55 e8             	mov    edx,DWORD PTR [rbp-0x18]
  48:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
  4b:	89 c6                	mov    esi,eax
  4d:	bf 00 00 00 00       	mov    edi,0x0
  52:	b8 00 00 00 00       	mov    eax,0x0
  57:	e8 00 00 00 00       	call   5c <foo+0x5c>
  5c:	c9                   	leave  
  5d:	c3                   	ret    
*/
  
